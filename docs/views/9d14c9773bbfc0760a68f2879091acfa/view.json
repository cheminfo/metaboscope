{"version":"2.146.0","grid":{"layers":{"Default layer":{"name":"Default layer"},"admin":{"name":"admin"},"importData":{"name":"importData"},"rangesManager":{"name":"rangesManager"},"actionsManager":{"name":"actionsManager"},"preferences":{"name":"preferences"},"Admin":{"name":"Admin"},"Load and Process":{"name":"Load and Process"}},"xWidth":10,"yHeight":10},"modules":[{"url":"modules/types/client_interaction/dragdrop/","configuration":{"sections":{},"groups":{"group":[{"label":["Drop your tsv here"],"dragoverlabel":[null],"hoverlabel":["Drag'n drop or paste here"],"fileSelectLabel":["Select file"],"labelFontSize":[26],"checkOptions":[["promptAmbiguous"]],"inputOptions":[["allowDrop","allowPaste","allowFileInput"]]}],"vars":[[{"filter":"ext","extension":"*","filetype":"text","type":"","variable":"file"}]],"string_general":[{"askFilename":[[]]}],"string":[[{"filter":"ext","extension":"*","type":"","variable":"str"}]],"photo":[[{"variable":"photo"}]]}},"layers":{"Default layer":{"position":{"left":0,"top":5},"size":{"width":37,"height":6},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":false,"created":true,"name":"Default layer"},"admin":{"position":{"left":0,"top":5},"size":{"width":37,"height":6},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":false,"created":true,"name":"Default layer"},"importData":{"position":{"left":0,"top":5},"size":{"width":37,"height":6},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":false,"created":true,"name":"Default layer"},"rangesManager":{"position":{"left":0,"top":5},"size":{"width":37,"height":6},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":false,"created":true,"name":"Default layer"},"actionsManager":{"position":{"left":0,"top":5},"size":{"width":37,"height":6},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":false,"created":true,"name":"Default layer"},"preferences":{"position":{"left":0,"top":5},"size":{"width":37,"height":6},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":false,"created":true,"name":"Default layer"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":0,"top":5},"size":{"width":37,"height":6},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":false,"created":true,"name":"Default layer"}},"id":154,"vars_out":[{"event":"onRead","rel":"data","jpath":["file","content"],"name":"droppedText"},{"event":"onRead","rel":"data","jpath":["file","filename"],"name":"droppedName"}],"vars_in":[],"actions_in":[{}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"","zindex":3},{"url":"modules/types/edition/slick_grid/","configuration":{"sections":{},"groups":{"group":[{"slickCheck":[["enableCellNavigation","rowNumbering","forceFitColumns","highlightScroll","forgetLastActive","enableAddRow","editable","autoEdit"]],"copyPaste":[[]],"copyPasteOptions":[["newRows"]],"autoColumns":[[]],"toolbar":[[]],"colorjpath":[[]],"slick.defaultColumnWidth":[null],"slick.rowHeight":["70"],"slick.headerRowHeight":[30],"slick.selectionModel":["row"],"idProperty":[""],"filterType":["pref"],"filterRow":["// Documentation: https://github.com/NPellet/visualizer/blob/46b40ca86345f8fa313563bf9c6ecb80ba323101/src/modules/types/edition/slick_grid/view.js#L1695-L1735"],"customJpaths":[""]}],"cols":[[{"name":"Label","jpath":["$id","3"],"editor":"none","forceType":"","formatter":"typerenderer","copyFormatter":"default","visibility":"both","rendererOptions":"","editorOptions":"","width":"50","hideColumn":[]},{"name":"Preferences","jpath":["data"],"editor":"none","forceType":"","formatter":"typerenderer","copyFormatter":"default","visibility":"both","rendererOptions":"twig:`<div style=\"line-height:normal\"><table style=\"font-size:xx-small\"><tr><th>Dataset ID:</th><td>{{datasetName}}</td></tr><tr><th>Number of samples:</th><td>{{selectedSpectra.length}}</td></tr><tr><th>target ID:</th><td>{{preferences.deconvolution.targetID}}</td></tr><tr><th>Threshold 1:</th><td>{{rendertype(preferences.first, {numeral:'0.00'})}}</td></tr><tr><th>Threshold 2:</th><td>{{rendertype(preferences.second, {numeral:'0.00'})}}</td></tr></table></div>`","editorOptions":"","width":"100","hideColumn":[]},{"name":"Ranges","jpath":["data"],"editor":"none","forceType":"","formatter":"typerenderer","copyFormatter":"default","visibility":"both","rendererOptions":"twig:`<div style=\"line-height:normal\"><table style=\"font-size:xx-small\"><tr><th>Label:</th><th>From:</th><th>To:</th></tr>{%for range in ranges%}<tr><td>{{range.label}}</td><td>{{rendertype(range.from, {numeral:'0.00'})}}</td><td>{{rendertype(range.to, {numeral:'0.00'})}}</td></tr>{%endfor%}</table></div>`","editorOptions":"","width":"100","minWidth":"100","maxWidth":"100","hideColumn":[]}]],"actionCols":[[{"name":"🗑","tooltip":"Delete result","icon":"fa-trash","backgroundColor":[255,255,255,0],"color":[0,0,0,1],"action":"deleteResultTemplate","position":"end","clickMode":"text","isAction":true}]],"groupings":[[{"getter":[]}]],"actionOutButtons":[[{}]],"data":[{"saveInView":[[]],"varname":[""],"data":["[]"]}]}},"layers":{"Default layer":{"position":{"left":0,"top":13},"size":{"width":38,"height":18},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"admin":{"position":{"left":0,"top":13},"size":{"width":37,"height":18},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"importData":{"position":{"left":0,"top":13},"size":{"width":37,"height":18},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"rangesManager":{"position":{"left":0,"top":13},"size":{"width":37,"height":18},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"actionsManager":{"position":{"left":170,"top":6},"size":{"width":18,"height":39},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"preferences":{"position":{"left":0,"top":13},"size":{"width":37,"height":18},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":170,"top":6},"size":{"width":18,"height":39},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"}},"id":155,"vars_in":[{"rel":"list","name":"analysisTemplates"}],"actions_in":[{}],"vars_out":[{"jpath":[]}],"actions_out":[{"event":"onRowActive","rel":"row","jpath":[],"name":"loadResultTemplate"}],"toolbar":{"custom":[[{"title":"Refresh templates","icon":"fa-sync","action":"refreshResults","position":"begin","color":[12,52,61,1]},{"title":"Save template","icon":"fa-save","action":"saveResultTemplate","position":"begin","color":[12,52,61,1]}]],"common":[{"toolbar":[[]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"","zindex":3},{"url":"modules/types/display/template-twig/","configuration":{"sections":{},"groups":{"group":[{"selectable":[[]],"template":[""],"modifyInForm":[[]],"debouncing":[0],"formOptions":[["keepFormValueIfDataUndefined"]]}]}},"layers":{"Default layer":{"position":{"left":58,"top":10},"size":{"width":25,"height":33},"zIndex":0,"display":true,"title":"Information about sample","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"admin":{"position":{"left":38,"top":5},"size":{"width":34,"height":38},"zIndex":0,"display":false,"title":"Information about sample","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"importData":{"position":{"left":38,"top":5},"size":{"width":34,"height":38},"zIndex":0,"display":false,"title":"Information about sample","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"rangesManager":{"position":{"left":38,"top":5},"size":{"width":34,"height":38},"zIndex":0,"display":false,"title":"Information about sample","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"actionsManager":{"position":{"left":38,"top":5},"size":{"width":34,"height":38},"zIndex":0,"display":false,"title":"Information about sample","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"preferences":{"position":{"left":54,"top":52},"size":{"width":24,"height":37},"zIndex":0,"display":true,"title":"Information about sample","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":38,"top":5},"size":{"width":34,"height":38},"zIndex":0,"display":false,"title":"Information about sample","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"}},"id":156,"vars_in":[{"rel":"tpl","name":"twigSample"},{"rel":"value","name":"hoverSelectedSpectrum"}],"actions_in":[{}],"vars_out":[{"jpath":[]}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[[]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"Information about sample","zindex":3},{"url":"modules/types/science/spectra/spectra_displayer/","configuration":{"sections":{"graph":[{"sections":{},"groups":{"graph":[{"url":[""],"zoom":["x"],"wheelAction":["zoomY"],"wheelbaseline":[0],"fullOut":["xAxis"],"legend":[null],"legendOptions":[["isSerieHideable","isSerieSelectable"]],"mouseTracking":[["track"]],"trackingAxis":["x"],"selectScatter":[[]],"independantYZoom":[[]]}]}}],"axis":[{"sections":{},"groups":{"xAxis":[{"checkboxes":[["flip","main","sec","display"]],"label":["δ (ppm)"],"beforeSpacing":["0"],"afterSpacing":[""],"min":[""],"max":[""],"nbTicksPrimary":[5],"axismodification":["none"]}],"yAxis":[{"checkboxes":[["main","sec"]],"label":[""],"beforeSpacing":["0"],"afterSpacing":[0],"min":[""],"max":[""],"nbTicksPrimary":[5],"fitToAxisOnFromTo":[[]]}]}}],"series":[{"sections":{},"groups":{"series":[{"overflow":[[]],"stackVerticalSpacing":[0]}]}}],"variables":[{"sections":{},"groups":{"variables":[[{"variable":"chart","axis":"0","adaptTo":"none","plotcolor":[1,1,255,1],"strokewidth":"1","strokestyle":"1","plotcontinuous":"continuous","peakpicking":[],"markers":[],"markerShape":"1","markerSize":2,"normalize":"none","optimizeSlots":[],"tracking":["yes"]},{"variable":"correlationChart","axis":"0","adaptTo":"none","plotcolor":[1,1,255,1],"strokewidth":"1","strokestyle":"1","plotcontinuous":"continuous","peakpicking":[],"markers":[],"markerShape":"1","markerSize":2,"normalize":"none","optimizeSlots":[],"tracking":["yes"]}]]}}],"misc":[{"sections":{},"groups":{"misc":[{"highlightOptions":["{height:'100%', fill: 'rgba(255,255,0,0.2)'}"]}]}}]},"groups":{}},"layers":{"Default layer":{"position":{"left":58,"top":44},"size":{"width":101,"height":38},"zIndex":0,"display":true,"title":"Create new range by pressing ALT and then click at the beginning and the end of the range. To calculate STOCSY press SHIFT + Alt and click at the point","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"admin":{"position":{"left":0,"top":49},"size":{"width":35,"height":33},"zIndex":0,"display":true,"title":"Create new range by pressing ALT and then click at the beginning and the end of the range. To calculate STOCSY press SHIFT + Alt and click at the point","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":38,"top":44},"size":{"width":103,"height":39},"zIndex":0,"display":false,"title":"Create new range by pressing ALT and then click at the beginning and the end of the range. To calculate STOCSY press SHIFT + Alt and click at the point","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"rangesManager":{"position":{"left":50,"top":37},"size":{"width":53,"height":33},"zIndex":0,"display":false,"title":"Create new range by pressing ALT and then click at the beginning and the end of the range. To calculate STOCSY press SHIFT + Alt and click at the point","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"actionsManager":{"position":{"left":122,"top":84},"size":{"width":61,"height":29},"zIndex":0,"display":false,"title":"Create new range by pressing ALT and then click at the beginning and the end of the range. To calculate STOCSY press SHIFT + Alt and click at the point","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"preferences":{"position":{"left":38,"top":46},"size":{"width":121,"height":36},"zIndex":0,"display":false,"title":"Create new range by pressing ALT and then click at the beginning and the end of the range. To calculate STOCSY press SHIFT + Alt and click at the point","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":122,"top":84},"size":{"width":61,"height":29},"zIndex":0,"display":false,"title":"Create new range by pressing ALT and then click at the beginning and the end of the range. To calculate STOCSY press SHIFT + Alt and click at the point","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"}},"id":157,"vars_in":[{"rel":"annotations","name":"rangeAnnotations"},{"rel":"chart","name":"chart"},{"rel":"annotations","name":"filterAnnotations"},{"rel":"chart","name":"boxPlotChart"},{"rel":"annotations","name":"trackAnnotations"},{"rel":"chart","name":"correlationChart"},{"rel":"annotations","name":"correlationAnnotations"}],"actions_in":[{"rel":"fromToX","name":"fromToX2"}],"vars_out":[{"event":"onTrackClick","rel":"trackData","jpath":[],"name":"clickedPoint"}],"actions_out":[{"event":"onTrackClick","rel":"dataAndEvent","jpath":[],"name":"trackClicked"},{"event":"onTrackMouse","rel":"dataAndEvent","jpath":[],"name":"trackMove"},{"event":"onZoomChange","rel":"fromToX","jpath":[],"name":"fromToX"}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[[]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"Create new range by pressing ALT and then click at the beginning and the end of the range. To calculate STOCSY press SHIFT + Alt and click at the point","zindex":1},{"url":"modules/types/science/spectra/spectra_displayer/","configuration":{"sections":{"graph":[{"sections":{},"groups":{"graph":[{"url":[""],"zoom":["none"],"wheelAction":["none"],"wheelbaseline":[0],"fullOut":["both"],"legend":[null],"legendOptions":[["isSerieHideable","isSerieSelectable"]],"mouseTracking":[[]],"trackingAxis":[""],"selectScatter":[["yes"]],"independantYZoom":[[]]}]}}],"axis":[{"sections":{},"groups":{"xAxis":[{"checkboxes":[["display"]],"label":[""],"beforeSpacing":["0"],"afterSpacing":[0],"min":[""],"max":[""],"nbTicksPrimary":[5],"axismodification":["none"]}],"yAxis":[{"checkboxes":[["display"]],"label":[""],"beforeSpacing":["0"],"afterSpacing":[0],"min":[""],"max":[""],"nbTicksPrimary":[5],"fitToAxisOnFromTo":[[]]}]}}],"series":[{"sections":{},"groups":{"series":[{"overflow":[[]],"stackVerticalSpacing":[0]}]}}],"variables":[{"sections":{},"groups":{"variables":[[{"variable":"scatter","axis":"0","adaptTo":"none","plotcolor":[1,1,255,1],"strokewidth":"1","strokestyle":"1","plotcontinuous":"continuous","peakpicking":[],"markers":["markers"],"markerShape":"1","markerSize":2,"normalize":"none","optimizeSlots":[],"tracking":[]}]]}}],"misc":[{"sections":{},"groups":{"misc":[{"highlightOptions":["{}"]}]}}]},"groups":{}},"layers":{"Default layer":{"position":{"left":84,"top":10},"size":{"width":75,"height":33},"zIndex":0,"display":true,"title":"Scatter plot of cross-correlation output","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"setup"},"admin":{"position":{"left":73,"top":5},"size":{"width":68,"height":38},"zIndex":0,"display":false,"title":"Scatter plot of cross-correlation output","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"setup"},"importData":{"position":{"left":73,"top":5},"size":{"width":68,"height":38},"zIndex":0,"display":false,"title":"Scatter plot of cross-correlation output","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"setup"},"rangesManager":{"position":{"left":73,"top":5},"size":{"width":68,"height":38},"zIndex":0,"display":false,"title":"Scatter plot of cross-correlation output","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"setup"},"actionsManager":{"position":{"left":0,"top":83},"size":{"width":73,"height":46},"zIndex":0,"display":true,"title":"Scatter plot of cross-correlation output","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"setup"},"preferences":{"position":{"left":73,"top":5},"size":{"width":68,"height":38},"zIndex":0,"display":false,"title":"Scatter plot of cross-correlation output","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"setup"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":0,"top":83},"size":{"width":73,"height":46},"zIndex":0,"display":false,"title":"Scatter plot of cross-correlation output","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"setup"}},"id":158,"vars_in":[{"rel":"chart","name":"scatter"},{"rel":"annotations","name":"scatterAnnotations"},{"rel":"chart","name":"threshold"},{"rel":"annotations","name":"thresholdAnnotation"}],"actions_in":[{}],"vars_out":[{"event":"onTrackClick","rel":"markerInfos","jpath":[],"name":"hoverScatter"},{"event":"onSelectScatter","rel":"selectedData","jpath":[],"name":"scatterSelected"}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"Remove selected spectra","icon":"fa-trash","action":"compassDeleteSelection","position":"begin","color":[100,100,100,1]},{"title":"Show spectra","icon":"fa-plus","action":"compassAddSpectraToSelection","position":"begin","color":[56,118,29,1]},{"title":"Only show selected spectra","icon":"fa-bullseye","action":"compassSelectCurrentSpectraSelection","position":"begin","color":[230,145,56,1]},{"title":"Hide spectra","icon":"fa-minus","action":"compassHideSpectra","position":"begin","color":[153,0,0,1]}]],"common":[{"toolbar":[[]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"Scatter plot of cross-correlation output","zindex":2},{"url":"modules/types/edition/slick_grid/","configuration":{"sections":{},"groups":{"group":[{"slickCheck":[["enableCellNavigation","rowNumbering","forceFitColumns","highlightScroll","editable","forgetLastActive","enableAddRow"]],"copyPaste":[[]],"copyPasteOptions":[["newRows"]],"autoColumns":[["remove"]],"toolbar":[[]],"colorjpath":[[]],"slick.defaultColumnWidth":[null],"slick.rowHeight":[null],"slick.headerRowHeight":[30],"slick.selectionModel":["row"],"idProperty":[""],"filterType":["pref"],"filterRow":["// Documentation: https://github.com/NPellet/visualizer/blob/46b40ca86345f8fa313563bf9c6ecb80ba323101/src/modules/types/edition/slick_grid/view.js#L1695-L1735"],"customJpaths":[""]}],"cols":[[{"name":"Label","jpath":["label"],"editor":"string","forceType":"","formatter":"typerenderer","copyFormatter":"default","visibility":"both","rendererOptions":"","editorOptions":"","width":"40","minWidth":"40","maxWidth":"40","hideColumn":[]},{"name":"from","jpath":["from"],"editor":"number","forceType":"","formatter":"typerenderer","copyFormatter":"default","visibility":"both","rendererOptions":"toPrecision: 3","editorOptions":"","hideColumn":[]},{"name":"to","jpath":["to"],"editor":"number","forceType":"","formatter":"typerenderer","copyFormatter":"default","visibility":"both","rendererOptions":"toPrecision: 3","editorOptions":"","hideColumn":[]}]],"actionCols":[[{"backgroundColor":[255,255,255,0],"color":[0,0,0,1],"position":"end","clickMode":"text"}]],"groupings":[[{"getter":[]}]],"actionOutButtons":[[{}]],"data":[{"saveInView":[[]],"varname":[""],"data":["[]"]}]}},"layers":{"Default layer":{"position":{"left":39,"top":10},"size":{"width":18,"height":33},"zIndex":0,"display":true,"title":"List of ranges","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"admin":{"position":{"left":36,"top":49},"size":{"width":14,"height":33},"zIndex":0,"display":true,"title":"List of ranges","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":142,"top":10},"size":{"width":18,"height":33},"zIndex":0,"display":false,"title":"List of ranges","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"rangesManager":{"position":{"left":49,"top":6},"size":{"width":17,"height":30},"zIndex":0,"display":true,"title":"List of ranges","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"actionsManager":{"position":{"left":170,"top":46},"size":{"width":18,"height":35},"zIndex":0,"display":true,"title":"List of ranges","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"preferences":{"position":{"left":142,"top":10},"size":{"width":18,"height":33},"zIndex":0,"display":false,"title":"List of ranges","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":170,"top":46},"size":{"width":18,"height":35},"zIndex":0,"display":false,"title":"List of ranges","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"}},"id":159,"vars_in":[{"rel":"list","name":"ranges"}],"actions_in":[{}],"vars_out":[{"event":"onRowActive","rel":"row","jpath":[],"name":"rangeClicked"},{"event":"onRowsSelect","rel":"rows","jpath":[],"name":"rangeSelected"}],"actions_out":[{"event":"onSelect","rel":"row","jpath":[],"name":"rangeClicked"}],"toolbar":{"custom":[[{"title":"Reload ranges","icon":"fa-tasks","action":"selectRange","position":"begin","color":[12,52,61,1]}]],"common":[{"toolbar":[[]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"List of ranges","zindex":23},{"url":"modules/types/display/template-twig/","configuration":{"sections":{},"groups":{"group":[{"selectable":[[]],"template":[""],"modifyInForm":[["yes"]],"debouncing":[100],"formOptions":[["keepFormValueIfDataUndefined"]]}]}},"layers":{"Default layer":{"position":{"left":39,"top":44},"size":{"width":18,"height":38},"zIndex":0,"display":true,"title":"Preferences","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"setup"},"admin":{"position":{"left":142,"top":44},"size":{"width":18,"height":39},"zIndex":0,"display":false,"title":"Preferences","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"setup"},"importData":{"position":{"left":142,"top":44},"size":{"width":18,"height":39},"zIndex":0,"display":false,"title":"Preferences","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"setup"},"rangesManager":{"position":{"left":142,"top":44},"size":{"width":18,"height":39},"zIndex":0,"display":false,"title":"Preferences","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"setup"},"actionsManager":{"position":{"left":142,"top":44},"size":{"width":18,"height":39},"zIndex":0,"display":false,"title":"Preferences","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"setup"},"preferences":{"position":{"left":54,"top":12},"size":{"width":24,"height":39},"zIndex":0,"display":true,"title":"Preferences","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"setup"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":142,"top":44},"size":{"width":18,"height":39},"zIndex":0,"display":false,"title":"Preferences","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"setup"}},"id":160,"vars_in":[{"rel":"tpl","name":"twigSetup"},{"rel":"form","name":"preferences"}],"actions_in":[{}],"vars_out":[{"event":"onFormSubmitted","rel":"form","jpath":[],"name":"formSubmitted"}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"Default prefrences","icon":"fa-dot-circle","action":"ResetPreferences","position":"begin","color":[12,52,61,1]}]],"common":[{"toolbar":[[]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"Preferences","zindex":14},{"url":"modules/types/client_interaction/code_executor/","configuration":{"sections":{},"groups":{"group":[{"display":[["editor","buttons"]],"execOnLoad":[[]],"asyncAwait":[["top"]],"script":["let spectraProcessor;\n\nif (this.variable) {\n    switch(this.variable) {\n        case 'droppedText': {\n            let droppedText=API.getData('droppedText').resurrect();\n            spectraProcessor = SpectraProcessor.SpectraProcessor.fromNormalizedMatrix(droppedText);\n            updateData()\n            break;\n        }\n        case 'datasetFromHome': {\n            let datasetFromHome = API.getData('datasetFromHome').resurrect();\n            datasetFromHome = datasetFromHome.split('=')[1];\n            let cdb = new CDB('https://couch.cheminfo.org/cheminfo-public/ed3ce004536b755025fbd19526fc1483');\n            cdb.fetchList().then(async(list) => {\n                const selectedDataset = list.filter((item) => item.name === datasetFromHome)[0];\n                if (!selectedDataset) return;\n                const dataset = await cdb.get(selectedDataset.name)\n                spectraProcessor = SpectraProcessor.SpectraProcessor.fromNormalizedMatrix(dataset);\n                updateData()\n            });\n            break\n        }\n    }\n} else {\n    return;\n}\n\nfunction updateData(){\n    const preferences=API.getData('preferences');\n    preferences.normalization=spectraProcessor.getNormalization();\n    preferences.triggerChange();\n    \n    let spectraInDataset=[];\n    for (let spectrum of spectraProcessor.spectra) {\n        console.log(spectrum.id)\n        spectraInDataset.push( {\n            id: spectrum.id,\n            selected: true,\n            pcaModel: false,\n            category: spectrum.meta.category,\n            color: spectrum.meta.color,\n            toStocsy: false,\n            stocsyColor: \"rgb(59,252,2)\",\n            toc: {\n                value: {\n                    reference: spectrum.id,\n                    misc: {\n                        id: spectrum.id,\n                        ...spectrum.meta\n                    }\n                }\n            },\n            _highlight: Math.random()\n        })\n    }\n    \n    API.createData('memoryInfo', spectraProcessor.getMemoryInfo());\n    \n    API.createData('spectraInDataset', spectraInDataset);\n    \n    API.createData('keepOriginal', false);\n    \n    API.cache('spectraProcessor', spectraProcessor);\n}"]}],"libs":[[{"lib":"src/util/couchdbAttachments","alias":"CDB"},{"lib":"components/papa-parse/papaparse.min","alias":"Papa"},{"lib":"SpectraProcessor","alias":"SpectraProcessor"},{"lib":"ML","alias":"ML"},{"lib":"chroma","alias":"chroma"}]],"buttons":[[{"name":"button1","label":"Execute","hide":[],"disable":[]}]]}},"layers":{"Default layer":{"position":{"left":85,"top":69},"size":{"width":66,"height":41},"zIndex":0,"display":false,"title":"Import data","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":6},"size":{"width":53,"height":62},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"actionsManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"preferences":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"}},"id":161,"vars_in":[{"rel":"inputValue","name":"droppedText"},{"rel":"inputValue","name":"datasetFromHome"}],"actions_in":[{}],"vars_out":[{"jpath":[]}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"","zindex":32},{"url":"modules/types/client_interaction/code_executor/","configuration":{"sections":{},"groups":{"group":[{"display":[["editor","buttons"]],"execOnLoad":[[]],"asyncAwait":[["top"]],"script":["let selectedSpectra = API.getData('selectedSpectra').resurrect();\nlet spectraProcessor = API.cache('spectraProcessor');\n\nlet preferences = API.getData('preferences').resurrect();\nspectraProcessor.setNormalization(preferences.normalization);\nfor (let spectrum of selectedSpectra) {\n    let id = spectrum.id;\n    if (spectraProcessor.contains(id)) {\n        let processorSpectrum=spectraProcessor.getSpectrum(id);\n        processorSpectrum.meta=getMeta(spectrum);\n        continue;\n    }\n\n    spectraProcessor.addFromData(spectrum.data, {\n        id,\n        meta: getMeta(spectrum)\n    })\n}\n\nfunction getMeta(spectrum) {\n    // if (!preferences.display.original) delete spectrum.meta.display;\n    delete spectrum.meta.display;\n    return {\n        ...{\n            display: DataObject.resurrect(spectrum.display),\n            color: DataObject.resurrect(spectrum.color),\n            category: DataObject.resurrect(spectrum.category),\n            _highlight: DataObject.resurrect(spectrum._highlight)\n        },\n        ... DataObject.resurrect(spectrum.meta)\n    }\n}\n"]}],"libs":[[{}]],"buttons":[[{"name":"button1","label":"Execute","hide":[],"disable":[]}]]}},"layers":{"Default layer":{"position":{"left":165,"top":8},"size":{"width":95,"height":43},"zIndex":0,"display":false,"title":"Data manager","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":54,"top":6},"size":{"width":53,"height":62},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"actionsManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"preferences":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"}},"id":162,"vars_in":[{"rel":"inputValue","name":"preferences"}],"actions_in":[{"rel":"execute","name":"updateManager"}],"vars_out":[{"jpath":[]}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"","zindex":3},{"url":"modules/types/client_interaction/code_executor/","configuration":{"sections":{},"groups":{"group":[{"display":[["editor","buttons"]],"execOnLoad":[[]],"asyncAwait":[["top"]],"script":["return\nvar action=getAction() || {name:''};\nvar sample=API.cache('sample');\nconsole.log(\"Receive action: \",action);\n\nif (!sample) return;\n\nif(this.action) {\n    switch (action.name) {\n    default:\n        sample.handleAction(action);\n    }    \n} else if(this.variable) {\n    await sample.handleDrop(this.variable, false, {\n        autoJcamp: false\n    });\n    setTimeout( () => {\n        API.doAction('selectRow', API.getData('mass').length-1);\n    },0);\n}"]}],"libs":[[{}]],"buttons":[[{"name":"button1","label":"Execute","hide":[],"disable":[]}]]}},"layers":{"Default layer":{"position":{"left":39,"top":95},"size":{"width":67,"height":22},"zIndex":0,"display":false,"title":"Rest on couch","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":108,"top":6},"size":{"width":50,"height":62},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"actionsManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"preferences":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"}},"id":163,"vars_in":[{"rel":"inputValue","name":"droppedNmr"}],"actions_in":[{"rel":"execute","name":"refresh"},{"rel":"execute","name":"save"},{"rel":"execute","name":"deleteAttachment"},{"rel":"execute","name":"updateAttachments"},{"rel":"execute","name":"unattach"}],"vars_out":[{"jpath":[]}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"","zindex":3},{"url":"modules/types/client_interaction/code_executor/","configuration":{"sections":{},"groups":{"group":[{"display":[["editor","buttons"]],"execOnLoad":[[]],"asyncAwait":[["top"]],"script":["const displayMode = API.getData('displayMode').resurrect();\nconst preferences = API.getData('preferences');\nlet clicked = DataObject.resurrect(preferences.clickedPoint);\nif (this.action) {\n    const value = DataObject.resurrect(this.action.value);\n    const entries = Object.entries(value.data);\n    switch(this.action.name) {\n      case 'updateStocsy':\n        break;\n      case 'trackClicked':\n        if (value.event.altKey && value.event.shiftKey) {\n            clicked = value.data[entries[0][0]].indexClosest;\n        } else {\n            return;\n        }\n        break;\n      default:\n        return\n    }\n}\n\npreferences.clickedPoint = clicked;\n\nconst spectraInDataset = API.getData('spectraInDataset');\nif (spectraInDataset.length === 0) return;\n\nconsole.time('STOCSY time:');\nconst ranges = API.getData('ranges')\nconst currentData = API.getData('currentData');\nconst rangeClicked = API.getData('rangeClicked');\n\nconst range = rangeClicked? rangeClicked.resurrect(): ranges[0];\nlet ids;\nlet scatterSelected;\nswitch(DataObject.resurrect(preferences.display.correlation)) {\n    case 'compass': {\n        if (currentData.length !== 0 && currentData !== undefined) {\n            ids = currentData.filter(item => item.range.label == range.label)[0].data\n                .filter(y => y.pass <= DataObject.resurrect(preferences.mode))\n                .map(x => x.id);\n        }\n        break\n    }\n    case 'selected': {\n        ids = spectraInDataset\n            .filter((item) => DataObject.resurrect(item.selected))\n            .map((item) => DataObject.resurrect(item.id))\n        break\n    }\n    default:\n        ids = spectraInDataset\n            .filter((item) => DataObject.resurrect(item.selected))\n            .map((item) => DataObject.resurrect(item.id))\n        break;\n}\n\nif (range) {\n    API.createData('info', {\n        range: range.label,\n        from: range.from,\n        to: range.to,\n        nbMolecules: ids.length\n    });    \n} else {\n    API.createData('info', {\n        range: 'Complete dataset',\n        nbMolecules: ids.length\n    })\n}\n\nconst spectraProcessor = API.cache('spectraProcessor');\n\nfor (let spectrum of spectraInDataset) {\n    let id = DataObject.resurrect(spectrum.id);\n    if (ids.includes(id)) {\n        spectrum.selected = true;\n    } else {\n        spectrum.selected = false;\n    }\n}\n\nspectraInDataset.triggerChange();\n\nconsole.timeEnd('STOCSY time:');\n"]}],"libs":[[{"lib":"https://www.lactame.com/lib/spectra-processor/1.0.0/spectra-processor.js","alias":"SP"},{"lib":"ML","alias":"ML"},{"lib":"chroma","alias":"chroma"},{"lib":"src/util/ui","alias":"UI"}]],"buttons":[[{"name":"button1","label":"Calculate STOCSY","hide":[],"disable":[]}]]}},"layers":{"Default layer":{"position":{"left":143,"top":79},"size":{"width":19,"height":4},"zIndex":0,"display":false,"title":"STOCSY","bgColor":[255,255,255,0],"wrapper":false,"created":true,"name":"setup"},"admin":{"position":{"left":0,"top":6},"size":{"width":50,"height":42},"zIndex":0,"display":true,"title":"STOCSY","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"STOCSY","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":6},"size":{"width":54,"height":71},"zIndex":0,"display":false,"title":"STOCSY","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"actionsManager":{"position":{"left":0,"top":6},"size":{"width":54,"height":71},"zIndex":0,"display":false,"title":"STOCSY","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"preferences":{"position":{"left":0,"top":6},"size":{"width":54,"height":71},"zIndex":0,"display":false,"title":"STOCSY","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":0,"top":6},"size":{"width":54,"height":71},"zIndex":0,"display":false,"title":"STOCSY","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"}},"id":164,"vars_in":[{"rel":"inputValue","name":"preferences"}],"actions_in":[{"rel":"execute","name":"trackClicked"}],"vars_out":[{"jpath":[]}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"STOCSY","zindex":3},{"url":"modules/types/client_interaction/code_executor/","configuration":{"sections":{},"groups":{"group":[{"display":[["editor","buttons"]],"execOnLoad":[[]],"asyncAwait":[["top"]],"script":["console.time('Cross-correlation time:')\nlet normed = ML.Array.normed;\nconst multiply = SP.X.multiply;\nconst spectraProcessor = API.cache('spectraProcessor');\nconst preferences = API.getData('preferences').resurrect();\nconst selectedSpectrum = preferences.convolution.targetID;\nconst spectraIDs = spectraProcessor.spectra.map((spectrum) => spectrum.id);\nconst rangesManager = API.cache('rangesManager');\nlet currentData = API.getData('currentData');\n\nif (spectraIDs.length === 0) return;\n\nif (this.variable === 'rangeClicked' && selectedSpectrum === undefined) {\n  UI.showNotification('There is no target function selected', 'error');\n  return;\n}\n\nif (selectedSpectrum != undefined) {\n  const firstThreshold = preferences.first;\n  const secondThreshold = preferences.second;\n\n  if (this.variable === 'preferences') {\n    currentData = [];\n    let currentPreferences = JSON.stringify(preferences);\n    if (API.cache('previousPreferences') === currentPreferences) return;\n    {\n      API.cache('previousPreferences', currentPreferences);\n    }\n  }\n  \n  const currentRange = DataObject.resurrect(API.cache('currentRange'));\n  const ranges = API.getData('ranges').resurrect();\n  for (let range of ranges) {\n      if (range.joined) continue;\n      if (!range.to) return;\n  }\n\n  let rangesToCalculate = [];\n  if (JSON.stringify(ranges) !== JSON.stringify(currentRange)) {\n    for (let range of ranges) {\n      if (!currentRange.find((item) => JSON.stringify(item) === JSON.stringify(range))) {\n          rangesToCalculate.push(range);\n      }\n    }\n    API.cache('currentRange', DataObject.resurrect(ranges));\n  }\n\n  if (this.variable === 'preferences') rangesToCalculate = ranges;\n  console.log('----:::::>>>>> Ranges to calculate:', rangesToCalculate);\n  // Calculate CCF for new ranges\n  let spectra = spectraProcessor.getSpectra({ spectraIDs });\n  let spectrum = spectraProcessor.getSpectrum(selectedSpectrum).normalized;\n  let filtered = crossCorrelationFilter(spectra, spectrum, rangesToCalculate, {\n    threshold1: firstThreshold,\n    threshold2: secondThreshold\n  });\n\n  if (filtered[0] !== undefined){\n    for (let item of filtered) {\n      currentData.push(item);\n    }\n  }\n  await API.createData('currentData', currentData)\n}\n\n\nfunction crossCorrelationFilter(matrix, array, rangesToCalculate, options = {}) {\n  let {\n    spectrumRange = 10,\n    threshold1 = 0.9,\n    threshold2 = 0.8\n  } = options;\n\n  if (threshold1 < threshold2) {\n    UI.showNotification('Threshold 2 is bigger than threshold 1', 'error');\n    threshold1 = threshold2;\n  }\n\n  let increment = spectrumRange / matrix[0].normalized.y.length;\n  let result = [];\n  if (rangesToCalculate.length !== 0) {\n    for (let i = 0; i < rangesToCalculate.length; i++) {\n      let targetSlice = normalization(\n        getSlices(rangesToCalculate[i], array, increment)\n      );\n      targetSlice = new convolution.DirectConvolution(\n          targetSlice.length,\n          targetSlice, \n          'CUT'\n      );\n      let output = [];\n      for (let k = 0; k < matrix.length; k++) {\n        let currentSlice = normalization(\n            getSlices(rangesToCalculate[i], matrix[k].normalized, increment)\n        );\n        let max = Math.max(...targetSlice.convolve(currentSlice));\n        let outcome = (max > threshold1) ? 'case1' :\n          (max > threshold2 && max < threshold1) ?\n            'case2' : 'case3';\n        switch (outcome) {\n          case 'case1': {\n            output.push(sortLevel(1, '#3BFC02', k, matrix[k], max));\n            break;\n          }\n          case 'case2': {\n            output.push(sortLevel(2, '#FCAC02', k, matrix[k], max));\n            break;\n          }\n          case 'case3': {\n            output.push(sortLevel(3, '#FC0202', k, matrix[k], max));\n            break;\n          }\n        }\n      }\n      result.push({\n        data: output,\n        range: rangesToCalculate[i]\n      });\n    }\n  }\n  return result;\n}\n\nfunction getSlices(ranges, array, increment) {\n  let slices = [];\n  let element = ranges.joined === undefined ? 'single' : 'composed';\n  switch (element) {\n    case 'single': {\n      for (let j = ranges.from; j < ranges.to; j += increment) {\n        slices.push(array.y[parseInt(j * (1 / increment))]);\n      }\n      break;\n    }\n    case 'composed': {\n      for (let g = 0; g < ranges.joined.length; g++) {\n        for (let l = ranges.joined[g].from; l < ranges.joined[g].to; l += increment) {\n          slices.push(array.y[parseInt(l * (1 / increment))]);\n        }\n      }\n      break;\n    }\n  }\n  if (slices.length % 2 == 0) slices.pop();\n  return slices;\n}\n\nfunction sortLevel(level, color, k, matrix, max) {\n  let result = {\n    pass: level,\n    id: matrix.id,\n    color: color,\n    scatterColor: matrix.meta.color,\n    max: max,\n    _highlight: k,\n    toStocsy: false\n  };\n  return result;\n}\n\nfunction arrayNorm(A) {\n  let result = Math.sqrt(multiply(A, A).reduce((a, b) => a + b));\n  return result;\n}\n\nfunction normalization(A) {\n  let norm = arrayNorm(A);\n  let result = A.map((a) => a / norm);\n  return result;\n}\n\nfunction createBlockAnnotation(to, init, end, color, transparency, options = {}) {\n  const opts = {\n    transparency: 0.05\n  };\n  options = Object.assign({}, opts, options);\n  let index = options.index;\n  let result = {\n    position: [\n      {\n        x: 0,\n        y: String(init),\n      }, {\n        x: to,\n        y: String(end),\n      }\n    ],\n    type: 'rect',\n    fillColor: `rgba(${color},${String(transparency)})`,\n    strokeColor: `rgba(${color},${String(transparency)})`,\n    info: {\n      from: 1 + index,\n      to: 2 + index,\n    },\n    label: [\n      {\n        size: '18px',\n        anchor: 'middle',\n        color: 'green',\n        position: {\n          x: (0 + to) / 2,\n          y: '10px'\n        },\n        selectOnClick: true,\n      }\n    ]\n  };\n  return result;\n}\n\nconsole.timeEnd('Cross-correlation time:')"]}],"libs":[[{"lib":"https://www.lactame.com/lib/ml-spectra-processing/1.3.1/ml-spectra-processing.js","alias":"SP"},{"lib":"chroma","alias":"chroma"},{"lib":"src/util/ui","alias":"UI"},{"lib":"https://www.lactame.com/lib/ml-convolution/HEAD/ml-convolution.js","alias":"convolution"},{"lib":"ML","alias":"ML"},{"lib":"delay","alias":"delay"}]],"buttons":[[{"name":"crossCorrelation","label":"Execute","hide":[],"disable":[]}]]}},"layers":{"Default layer":{"position":{"left":144,"top":39},"size":{"width":14,"height":4},"zIndex":0,"display":false,"title":"Cross-correlation","bgColor":[255,255,255,0],"wrapper":false,"created":true,"name":"setup"},"admin":{"position":{"left":51,"top":6},"size":{"width":53,"height":76},"zIndex":0,"display":true,"title":"Cross-correlation","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Cross-correlation","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":55,"top":6},"size":{"width":58,"height":71},"zIndex":0,"display":false,"title":"Cross-correlation","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"actionsManager":{"position":{"left":55,"top":6},"size":{"width":58,"height":71},"zIndex":0,"display":false,"title":"Cross-correlation","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"preferences":{"position":{"left":55,"top":6},"size":{"width":58,"height":71},"zIndex":0,"display":false,"title":"Cross-correlation","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":55,"top":6},"size":{"width":58,"height":71},"zIndex":0,"display":false,"title":"Cross-correlation","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"}},"id":165,"vars_in":[{"rel":"inputValue","name":"preferences"},{"rel":"inputValue","name":"rangeClicked"}],"actions_in":[{}],"vars_out":[{"jpath":[]}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"Cross-correlation","zindex":3},{"url":"modules/types/client_interaction/code_executor/","configuration":{"sections":{},"groups":{"group":[{"display":[["editor","buttons"]],"execOnLoad":[[]],"asyncAwait":[["top"]],"script":["let normalized = API.cache('spectraProcessor').getNormalizedData();\nlet spectra = normalized.matrix;\nlet currentData = API.getData('currentData').resurrect();\nlet preferences = API.getData('preferences').resurrect();\nlet threshold = [preferences.first, preferences.second]\nAPI.doAction('updateStocsy')\n\nif (currentData && currentData.length !== 0) {\n  let selectedRange = API.getData('rangeClicked')?\n  API.getData('rangeClicked').resurrect(): null;\n  if (selectedRange === null) return;\n  let x = new Array(currentData[0].data.length).fill().map((item, index) => index + 1);\n  let y = currentData.filter((element) => element.range.label == selectedRange.label)[0];\n  let spectraInDataset = API.getData('spectraInDataset');\n  let updatedData = [];\n  if (this.variable && this.variable === 'currentData') {\n    for (let i = 0; i < y.data.length; i++) {\n      const sample = y.data.filter((item) => DataObject.resurrect(item.id) === DataObject.resurrect(spectraInDataset[i].id))[0];\n      updatedData.push(sample)\n      spectraInDataset[i].toStocsy = DataObject.resurrect(sample.pass) <= preferences.mode ? true : false;\n      spectraInDataset[i].stocsyColor = DataObject.resurrect(sample.color);\n      spectraInDataset[i].max = DataObject.resurrect(sample.max);\n    }\n    spectraInDataset.triggerChange();\n  }\n\n    // ********* Building scatter plot ********* //\n    let unselected = [];\n    let yUpdated = [];\n    let updatedInfo = [];\n    for (let i = 0; i < x.length; i++) {\n        const sample = y.data.filter((item) => item.id === DataObject.resurrect(spectraInDataset[i].id))[0];\n        yUpdated.push(sample.max)\n        unselected.push({\n            fill: DataObject.resurrect(sample.scatterColor),\n            shape: 'circle',\n            cx: 0,\n            cy: 0,\n            r: 3,\n            height: '5px',\n            width: '5px',\n            stroke: 'transparent',\n        });\n        updatedInfo.push({\n            id: sample.id,\n            _highlight: spectraInDataset[i]._highlight\n        })\n    }\n\n    let scatter = {};\n    scatter.data = [{\n        x: x,\n        y: yUpdated,\n        info: updatedInfo,\n        // normalized.ids.map( (id,index) => {\n        //     return {\n        //         id,\n        //         meta: normalized.meta[index]\n        //     }\n        // }),\n        type: 'scatter',\n        styles: {\n            unselected: unselected\n        }\n    }];\n\n    API.createData('scatter', scatter);\n    \n  // ********* Building scatter annotations ********* //\n  let scatterAnnotations = [];\n  for (let i = 0; i < y.data.length; i++) {\n    scatterAnnotations.push({\n      _highlight: updatedInfo[i]._highlight,\n      type: 'ellipse',\n      position: [\n        {\n          x: x[i],\n          y: yUpdated[i]\n        }\n      ],\n      props: {\n        rx: '6px',\n        ry: '6px'\n      },\n      strokeWidth: '0px',\n      fillColor: 'rgba(0,0,0,0)'\n    });\n  }\n\n  // ********* Building threshold chart ********* //\n  let thresholds = {\n    data: []\n  };\n\n  let styles = {\n    selected: { lineColor: '#A4A4A4', lineStyle: 5, lineWidth: 5 },\n    unselected: { lineColor: '#A4A4A4', lineStyle: 5, lineWidth: 5 }\n  };\n\n  let domain = new Array(spectra.length).fill().map((item, index) => index + 1);\n\n  for (let i = 0; i < 2; i++) {\n    thresholds.data.push({\n      x: domain,\n      y: new Array(spectra.length).fill(threshold[i]),\n      styles: styles\n    });\n  }\n\n  // Build the blocks annotations\n  let annotationList = [0, threshold[0], threshold[1], 100];\n  let colors = ['249, 12, 8', '231, 249, 8', '8, 249, 88'];\n  let thresholdAnnotation = [];\n\n  for (let i = 1; i < annotationList.length; i++) {\n    thresholdAnnotation.push(\n      createBlockAnnotation(\n        spectraInDataset.length,\n        annotationList[i - 1],\n        annotationList[i],\n        colors[i - 1],\n        0.05\n      )\n    );\n  }\n  API.createData('thresholdAnnotation', thresholdAnnotation);\n  API.createData('threshold', thresholds);\n  API.createData('scatterAnnotations', scatterAnnotations);\n  const ids = spectraInDataset.filter((item) => (item.toStocsy));\n  if (selectedRange) {\n        const info = API.getData('info');\n        if (!info) {\n           API.createData('info', {\n                range: selectedRange.label,\n                from: selectedRange.from,\n                to: selectedRange.to,\n                nbMolecules: ids.length\n            }); \n        }\n    } else {\n        API.createData('info', {\n            range: 'Complete dataset',\n            nbMolecules: ids.length\n        })\n    }\n}\n\nAPI.doAction('updateStocsy')\n\nfunction createBlockAnnotation(to, init, end, color, transparency, options = {}) {\n  const opts = {\n    transparency: 0.05\n  };\n  options = Object.assign({}, opts, options);\n  let index = options.index;\n  let result = {\n    position: [\n      {\n        x: 0,\n        y: String(init),\n      }, {\n        x: to,\n        y: String(end),\n      }\n    ],\n    type: 'rect',\n    fillColor: `rgba(${color},${String(transparency)})`,\n    strokeColor: `rgba(${color},${String(transparency)})`,\n    info: {\n      from: 1 + index,\n      to: 2 + index,\n    },\n    label: [\n      {\n        size: '18px',\n        anchor: 'middle',\n        color: 'green',\n        position: {\n          x: (0 + to) / 2,\n          y: '10px'\n        },\n        selectOnClick: true,\n      }\n    ]\n  };\n  return result;\n}\n"]}],"libs":[[{"lib":"chroma","alias":"chroma"}]],"buttons":[[{"name":"button1","label":"Execute","hide":[],"disable":[]}]]}},"layers":{"Default layer":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Create charts and annotations","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"admin":{"position":{"left":105,"top":6},"size":{"width":54,"height":76},"zIndex":0,"display":true,"title":"Create charts and annotations","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Create charts and annotations","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":114,"top":6},"size":{"width":55,"height":71},"zIndex":0,"display":false,"title":"Create charts and annotations","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"actionsManager":{"position":{"left":114,"top":6},"size":{"width":55,"height":71},"zIndex":0,"display":false,"title":"Create charts and annotations","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"preferences":{"position":{"left":114,"top":6},"size":{"width":55,"height":71},"zIndex":0,"display":false,"title":"Create charts and annotations","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":114,"top":6},"size":{"width":55,"height":71},"zIndex":0,"display":false,"title":"Create charts and annotations","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"}},"id":166,"vars_in":[{"rel":"inputValue","name":"currentData"}],"actions_in":[{"rel":"execute","name":"updateSpectra"}],"vars_out":[{"jpath":[]}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"Create charts and annotations","zindex":3},{"url":"modules/types/client_interaction/code_executor/","configuration":{"sections":{},"groups":{"group":[{"display":[["editor","buttons"]],"execOnLoad":[[]],"asyncAwait":[["top"]],"script":["const rangesManager=API.cache('rangesManager');\n\nif (this.action) {\n    rangesManager.processAction(this.action);\n}\n\nif (this.variable) {\n    switch (this.variable) {\n        case 'ranges': \n            rangesManager.updateAnnotations();\n            break;\n    }\n}\n"]}],"libs":[[{}]],"buttons":[[{"name":"button1","label":"Execute","hide":[],"disable":[]}]]}},"layers":{"Default layer":{"position":{"left":195,"top":81},"size":{"width":35,"height":41},"zIndex":0,"display":false,"title":"Ranges manager","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Ranges manager","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Ranges manager","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":6},"size":{"width":48,"height":30},"zIndex":0,"display":true,"title":"Ranges manager","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"rangesManager"},"actionsManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Ranges manager","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"},"preferences":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Ranges manager","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"stocsy"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Ranges manager","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"}},"id":167,"vars_in":[{"rel":"inputValue","name":"ranges"}],"actions_in":[{"rel":"execute","name":"trackClicked"},{"rel":"execute","name":"deletedRows"},{"rel":"execute","name":"trackMove"}],"vars_out":[{"jpath":[]}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"","zindex":3},{"url":"modules/types/client_interaction/code_executor/","configuration":{"sections":{},"groups":{"group":[{"display":[["editor","buttons"]],"execOnLoad":[[]],"asyncAwait":[["top"]],"script":["let rangeSelected = API.getData('rangeSelected');\nlet rangesManager = API.cache('rangesManager');\nlet ranges = API.getData('ranges');\n\nif (!rangeSelected) return;\n\nconst labels = rangeSelected.map((x) => x.label)\n// console.log(lab)\nlet addRange = {\n    label: \"\",\n    from: \"\",\n    to: \"\",\n    joined: [],\n    _highlight: [],\n}\n\nif (this.button === 'join') {\n    for (let label of labels) {\n        let range = ranges.filter((range) => range.label == label);\n        const highlight = range[0]._highlight;\n        range = range[0].resurrect();\n        addRange.label = addRange.label.concat(range.label)\n        const newRange = {\n            from: range.from,\n            to: range.to\n        }\n        addRange.joined.push(newRange)\n        addRange._highlight.push(highlight)\n    }\n    rangesManager.addRanges([addRange])\n}\n\n\n\n"]}],"libs":[[{"lib":"src/util/ui","alias":"UI"}]],"buttons":[[{"name":"join","label":"Join ranges","hide":[],"disable":[]}]]}},"layers":{"Default layer":{"position":{"left":42,"top":5},"size":{"width":15,"height":4},"zIndex":0,"display":true,"title":"Joining ranges","bgColor":[255,255,255,0],"wrapper":false,"created":true,"name":"Default layer"},"admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Joining ranges","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Joining ranges","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":37},"size":{"width":48,"height":37},"zIndex":0,"display":true,"title":"Joining ranges","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"rangesManager"},"actionsManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Joining ranges","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"},"preferences":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Joining ranges","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"stocsy"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Joining ranges","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"}},"id":168,"vars_in":[{}],"actions_in":[{"rel":"execute","name":"deleteRange"},{"rel":"execute","name":"trackClicked"},{"rel":"execute","name":"deletedRows"}],"vars_out":[{"jpath":[]}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"Joining ranges","zindex":3},{"url":"modules/types/client_interaction/code_executor/","configuration":{"sections":{},"groups":{"group":[{"display":[["editor","buttons"]],"execOnLoad":[[]],"asyncAwait":[["top"]],"script":["let currentAnalysisResults=API.getData('currentAnalysisResults');\nlet userAnalysisResults=API.cache(\"userAnalysisResults\");\n\nswitch (this.action.name) {\n    case 'refreshResults':\n        await userAnalysisResults.refresh();\n        break;\n    /*\n    case 'ResetPreferences':\n        API.getData('preferences').resetValue();\n    */\n\n    case 'deleteResultTemplate':\n    case 'deleteResult':\n        await userAnalysisResults.deleteTemplate(this.action.value)\n        API.doAction('refreshResults');\n        break;\n        \n    case 'saveResultTemplate': {\n        let value = (currentAnalysisResults) ? currentAnalysisResults.resurrect().$id[3] : '';\n        let name=await UI.enterValue({\n            label: 'Enter the preference name',\n            buttonLabel: 'Save',\n            value\n        });\n        if (!name) return;\n        let result = await userAnalysisResults.saveTemplate(name, API.getData('preferences').resurrect(), {\n            datasetName: API.getData('droppedName').resurrect(),\n            preferences: API.getData('preferences').resurrect(),\n            ranges: API.getData('ranges').resurrect(),\n            spectraInDataset: API.getData('spectraInDataset').resurrect(),\n            currentData: API.getData('currentData').resurrect(),\n            clickedPoint: API.getData('clickedPoint').resurrect(),\n        });\n        API.doAction('refreshResults');\n        break;\n    }\n\n    case 'loadResultTemplate': {\n        let result = await userAnalysisResults.loadResult(this.action.value);\n        let rangesManager = API.cache('rangesManager');\n        rangesManager.addRanges(result.ranges);\n        API.createData('rangeClicked', result.ranges[0])\n        API.createData('preferences', result.preferences);\n        API.createData('spectraInDataset', result.spectraInDataset);\n        API.createData('currentData', result.currentData);\n        API.createData('clickedPoint', result.clickedPoint);\n        break;\n    }\n\n    case 'selectRange':\n        let templates=API.getData('analysisTemplates');\n        if (! templates) {\n            UI.showNotification('Only available when linked to a database','warning');\n            return;\n        }\n        let output = await UI.form(`\n            <div style=\"zoom: 1.5;\">\n                <form>\n                    <p style=\"padding-bottom: 10px\">\n                    Reload one of the previously saved preferences:\n                    </p>\n                    <select name='template'>\n                        ${templates.map((template) => {\n                            let key=String(template.id);\n                            // let _id=String(template._id);\n                            return `\n                                <option value=\"${key}\">${key}</option>\n                            `\n                        })}\n                        \n                    </select>\n                    <input type=\"submit\" value=\"Load preferences\"/>\n                </form>\n            </div>\n        `)\n        if (output) {\n          let result = await userAnalysisResults.loadResult({_id: output.template});\n          let rangesManager = API.cache('rangesManager');\n          rangesManager.addRanges(result.ranges)\n        }\n        break;\n    default:\n}\n\n\n"]}],"libs":[[{"lib":"ML","alias":"ML"},{"lib":"src/util/ui","alias":"UI"}]],"buttons":[[{"name":"button1","label":"Execute","hide":[],"disable":[]}]]}},"layers":{"Default layer":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"User analysis results","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"User analysis results","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"User analysis results","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"User analysis results","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"rangesManager"},"actionsManager":{"position":{"left":108,"top":6},"size":{"width":61,"height":76},"zIndex":0,"display":true,"title":"User analysis results","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"},"preferences":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"User analysis results","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"stocsy"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":108,"top":6},"size":{"width":61,"height":76},"zIndex":0,"display":false,"title":"User analysis results","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"}},"id":169,"vars_in":[{}],"actions_in":[{"rel":"execute","name":"saveResultTemplate"},{"rel":"execute","name":"loadResultTemplate"},{"rel":"execute","name":"ResetPreferences"},{"rel":"execute","name":"refreshResults"},{"rel":"execute","name":"deleteResultTemplate"},{"rel":"execute","name":"selectRange"}],"vars_out":[{"jpath":[]}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"User analysis results","zindex":3},{"url":"modules/types/display/template-twig/","configuration":{"sections":{},"groups":{"group":[{"selectable":[[]],"template":["<style>\n    #info {\n        font-family: monospace;\n    }\n</style>\n<table>\n    <tr>\n        <td>\n            <h2> Compass information </h2>\n        </td>\n        <td>\n            &nbsp; &nbsp; Range label: <var style=\"color: red\"> {{info.range}} </var> <br>\n        </td>\n        <td>\n            &nbsp; &nbsp; Number of spectra to calculate STOCSY: <var style=\"color: blue\"> {{info.nbMolecules}} </var> <br>\n        </td>\n        {% if info.from %}\n        <td>\n            &nbsp; &nbsp; from: <var style=\"color: green\"> {{rendertype(info.from, {numeral:'0.00'})}} </var> <br>\n        </td>\n        {% endif %}\n        {% if info.to %}\n        <td>\n            &nbsp; &nbsp; to: <var style=\"color: green\"> {{rendertype(info.to, {numeral:'0.00'})}} </var> <br>\n        </td>\n        {% endif %}\n    </tr>\n</table>"],"modifyInForm":[[]],"debouncing":[0],"formOptions":[["keepFormValueIfDataUndefined"]]}]}},"layers":{"Default layer":{"position":{"left":59,"top":3},"size":{"width":85,"height":4},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":false,"created":true,"name":"Default layer"},"admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"rangesManager"},"actionsManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"},"preferences":{"position":{"left":0,"top":4},"size":{"width":60,"height":7},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"preferences"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"}},"id":170,"vars_in":[{"rel":"value","name":"info"}],"actions_in":[{}],"vars_out":[{"jpath":[]}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"","zindex":3},{"url":"modules/types/client_interaction/code_editor/","configuration":{"sections":{},"groups":{"group":[{"mode":["html"],"outputType":[null],"btnvalue":["Send script"],"iseditable":[["editable"]],"hasButton":[["button"]],"variable":[[]],"storeOnChange":[["store"]],"debouncing":[2000],"script":["<style>\n    #extendedForm {\n        padding: 10px;\n    }\n    #extendedForm .addRow {\n        color: green;\n        font-weight: bold;\n        font-size: 12px;\n        padding: .4em .6em;\n    }\n    #extendedForm .removeRow {\n        color: red;\n        font-weight: bold;\n        font-size: 12px;\n        padding: .4em .8em;\n    }\n    #extendedForm h1 {\n        font-size: 16px;\n        padding-top: 12px;\n        padding-bottom: 4px;\n        space\n    }\n    #extendedForm h2 {\n        font-size: 12px;\n        margin-top: 12px;\n        margin-bottom: 4px;\n        space\n    }\n    #extendedForm input[type=number]{\n        width: 60px;\n    }\n    #extendedForm input, #extendedForm select {\n        margin-top: 3px;\n        margin-bottom: 3px;\n    } \n</style>\n\n<div id='extendedForm'>\n    <form id = 'idForm'>\n    <h1> Thresholds </h1>\n    <table>\n        <tr></tr>\n    </table>\n    <table >\n        <tbody id = 'table'>\n            <tr>\n                <th> First: </th>\n                <th></th><th></th>\n                <th>Second:</th>\n            </tr>\n            <tr>\n                <td>\n                    <input name=\"first\" size=\"6\" type=\"number\">\n                </td>\n                <td></td>\n                <td></td>\n                <td>\n                    <input name=\"second\" size=\"6\" type=\"number\">\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    <table>\n        <tbody>\n            <tr>\n                <h2> Data to display COMPASS </h2>\n            </tr>\n            <tr>\n                <input name =\"mode\" size=\"12\" type=\"radio\" value = 1> Values > First threshold <br>\n            </tr>\n            <tr>\n                <input name =\"mode\" size=\"12\" type=\"radio\" value = 2> Values > Second threshold <br>\n            </tr>\n            <tr>\n                <input name =\"mode\" size=\"12\" type=\"radio\" value = 3> All of them <br>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<script>\n    function toggle(element) {\n        let nextStyle=element.nextElementSibling.style\n        if (nextStyle.display===\"none\") {\n            nextStyle.display = \"block\";\n            element.innerHTML='▼';\n        } else {\n            nextStyle.display = \"none\";\n            element.innerHTML='▶';\n        }\n    }\n</script>\n\n<script>\n    require(['vh/util/twigAdvancedForm'], function(AF) {\n        AF('extendedForm', {debug:false});\n    });\n</script>\n\n"]}],"ace":[{"useSoftTabs":[["yes"]],"tabSize":[4]}]}},"layers":{"Default layer":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"setup"},"admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"rangesManager"},"actionsManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"},"preferences":{"position":{"left":0,"top":12},"size":{"width":53,"height":39},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"preferences"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"}},"id":171,"vars_in":[{}],"actions_in":[{"rel":"_editPreferences","name":"trackClicked"},{"rel":"_editPreferences","name":"updatePreferences"}],"vars_out":[{"event":"onEditorChange","rel":"data","jpath":[],"name":"twigSetup"}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"","zindex":3},{"url":"modules/types/client_interaction/code_editor/","configuration":{"sections":{},"groups":{"group":[{"mode":["html"],"outputType":[null],"btnvalue":["Send script"],"iseditable":[["editable"]],"hasButton":[["button"]],"variable":[[]],"storeOnChange":[["store"]],"debouncing":[0],"script":["{%set data=hoverSelectedSpectrum %}\n\n<style>\n    #toc, #toc tbody  {\n        font-size: 12px;\n        font-family: Arial, Helvetica, sans-serif;\n    }\n    #toc, #toc td, #toc th {\n        padding-left: 5px;\n        padding-right: 5px;\n        padding-top: 5px;\n        padding-bottom: 5px;\n    }\n    #toc table {\n        border-collapse: collapse;\n    }\n    #toc > table > tbody > tr > th, #toc > table > tbody > tr > td {\n        border-top: 0.5px solid grey;\n        border-bottom: 0.5px solid grey;\n    }\n    #toc h1 {\n        font-size:20px;\n        text-align: center;\n    }\n    #toc td,  #toc th {\n        vertical-align: top;\n        text-align: left;\n    }\n</style>\n\n{% macro showProperties(object) %}\n    {% if object is iterable %}\n        <table>\n            {% for key, value in object %}\n            <tr>\n                <th>{{key}}</th>\n                <td>{{ _self.showProperties(value) }}</td>\n            </tr>\n            {% endfor %}  \n        </table>\n    {% else %}\n        {% if object is same as (false) %}\n            <span style=\"color:red\">✘</span>︎\n        {% elseif object is same as (true) %}\n             <span style=\"color:green\">✔</span>\n        {% else %}\n            {{object}}\n        {% endif %}\n    {% endif %}\n{% endmacro %}\n{% import _self as macros %}\n    \n\n<div id='toc'>\n \n    <h1>{{data.id}}</h1>\n    \n    <table>\n        {% if data.name %}\n            <tr>\n                <th>Name:</th>\n                <td>{{data.name}}</td>           \n            </tr>\n        {% endif %}\n        {% if data.expno %}\n            <tr>\n                <th>Experience number:</th>\n                <td>{{data.expno}}</td>           \n            </tr>\n        {% endif %}\n        {% if data.pulprog %}\n            <tr>\n                <th>Pulse program:</th>\n                <td>{{data.pulprog}}</td>           \n            </tr>\n        {% endif %}\n\n        {% if data.category %}\n            <tr>\n                <th>Category:</th>\n                <td>{{data.category}}</td>           \n            </tr>\n        {% endif %}\n        {% if data.color %}\n            <tr>\n                <th>Color:</th>\n                <td style=\"background-color: {{data.color}}\"></td>           \n            </tr>\n        {% endif %}\n        {% if data.max %}\n            <tr>\n                <th> cc value:</th>\n                <td>{{rendertype(data.max, {numeral:'0.0000'})}}</td>           \n            </tr>\n        {% endif %}\n        {% if data.stocsyColor %}\n            <tr>\n                <th>🚦</th>\n                <td style=\"background-color: {{data.stocsyColor}}\"></td>           \n            </tr>\n        {% endif %}\n        {% if data.meta %}\n            <tr>\n                <th>to compute STOCSY :</th>\n                <td>\n                    {{ macros.showProperties(data.toStocsy) }}\n                </td>           \n            </tr>\n        {% endif %}\n        {% if data.meta %}\n            <tr>\n                <th>Meta:</th>\n                <td>\n                    {{ macros.showProperties(data.meta) }}\n                </td>           \n            </tr>\n        {% endif %}\n    </table>\n</div>\n"]}],"ace":[{"useSoftTabs":[["yes"]],"tabSize":[4]}]}},"layers":{"Default layer":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"rangesManager"},"actionsManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"},"preferences":{"position":{"left":0,"top":52},"size":{"width":53,"height":37},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"preferences"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"}},"id":172,"vars_in":[{}],"actions_in":[{}],"vars_out":[{"event":"onEditorChange","rel":"data","jpath":[],"name":"twigSample"}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"","zindex":3},{"url":"modules/types/client_interaction/code_executor/","configuration":{"sections":{},"groups":{"group":[{"display":[["editor","buttons"]],"execOnLoad":[[]],"asyncAwait":[["top"]],"script":["let value=this.action.value;\n\nswitch (this.action.name) {\n    case 'trackClicked': {\n        console.log('trackClicked')\n        if (value.event.altKey && value.event.shiftKey) {\n            console.log('pass')\n            let key=Object.keys(value.data)[0];\n            let preferences=API.getData('preferences');\n            preferences.display.correlationIndex=value.data[key].indexClosest;\n            preferences.display.correlationX=value.data[key].xExact;\n            if (! String(preferences.display.correlation)) {\n                preferences.display.correlation=\"selected\";\n                preferences.display.selection=\"none\";\n            }\n            preferences.triggerChange();\n        }\n        break;\n    }\n    case 'trackMove': {\n        let displayPreferences = DataObject.resurrect(API.getData('preferences').display);;\n        const trackMove = this.action.value.data.chart;\n        if (! trackMove || ! displayPreferences.trackingInfo || displayPreferences.original==='true') {\n            API.createData('trackAnnotations', []);\n            return;\n        }\n        const spectraProcessor=API.cache('spectraProcessor');\n        const annotations=spectraProcessor.getTrackAnnotation(trackMove.indexBefore)\n        API.createData('trackAnnotations', annotations)\n        break;\n    }\n    default:\n}\n"]}],"libs":[[{}]],"buttons":[[{"name":"button1","label":"Execute","hide":[],"disable":[]}]]}},"layers":{"Default layer":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Deal with other actions","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Deal with other actions","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Deal with other actions","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Deal with other actions","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"rangesManager"},"actionsManager":{"position":{"left":53,"top":6},"size":{"width":54,"height":76},"zIndex":0,"display":true,"title":"Deal with other actions","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"},"preferences":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Deal with other actions","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"preferences"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":53,"top":6},"size":{"width":54,"height":76},"zIndex":0,"display":false,"title":"Deal with other actions","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"}},"id":173,"vars_in":[{}],"actions_in":[{"rel":"execute","name":"downloadNormalizedMatrix"},{"rel":"execute","name":"trackMove"},{"rel":"execute","name":"trackClicked"}],"vars_out":[{"jpath":[]}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"Deal with other actions","zindex":3},{"url":"modules/types/client_interaction/code_executor/","configuration":{"sections":{},"groups":{"group":[{"display":[["editor","buttons"]],"execOnLoad":[[]],"asyncAwait":[["top"]],"script":["console.log(this.action);\nconst roc=API.cache('roc');\nlet spectraInDataset = API.getData('spectraInDataset');\nconst spectraDataSet=API.cache('spectraDataSet');\n\nswitch (this.action.name) {\n    case 'SetTarget':\n        const preferences=API.getData('preferences');\n        preferences.setChildSync(['convolution','targetID'],this.action.value.id)\n        let targets = spectraInDataset.filter( spectrum => String(this.action.value.id) === String(spectrum.id));\n        targets[0].reference=false;\n        spectraInDataset.triggerChange()\n        break;\n    case 'compassAddSpectraToSelection': {\n        let scatterSelected=API.getData('scatterSelected').map( entry => String(entry.id));\n        spectraInDataset=spectraInDataset.filter( entry => scatterSelected.includes(String(entry.id)));\n        API.createData('currentlySelectedSpectra', spectraInDataset);\n        window.setTimeout( () => {\n            API.doAction('addSpectraToSelection');\n        });\n        break;\n    }\n    case 'compassSelectCurrentSpectraSelection': {\n        let scatterSelected=API.getData('scatterSelected').map( entry => String(entry.id));\n        spectraInDataset=spectraInDataset.filter( entry => scatterSelected.includes(String(entry.id)));\n        API.createData('currentlySelectedSpectra', spectraInDataset);\n        window.setTimeout( () => {\n            API.doAction('selectCurrentSpectraSelection');\n        });\n        break;\n    }\n    case 'compassHideSpectra': {\n        let scatterSelected=API.getData('scatterSelected').map( entry => String(entry.id));\n        spectraInDataset=spectraInDataset.filter( entry => scatterSelected.includes(String(entry.id)));\n        API.createData('currentlySelectedSpectra', spectraInDataset);\n        window.setTimeout( () => {\n            API.doAction('hideSpectra');\n        });\n        break;\n    }\n    case 'compassDeleteSelection': {\n            let scatterSelected=API.getData('scatterSelected');\n            for (let selected of scatterSelected) {\n                for (let i=0; i<spectraInDataset.length; i++) {\n                    let spectrum=spectraInDataset[i];\n                    if (String(selected.id)===String(spectrum.id)) {\n                        spectraInDataset.splice(i,1);\n                        break;\n                    }\n                }\n            }\n            spectraInDataset.triggerChange();\n        }\n        break;\n    default:\n        await spectraDataSet.processAction(this.action);\n}\n\n"]}],"libs":[[{"lib":"vh/eln/Sample","alias":"Sample"},{"lib":"src/util/color","alias":"Color"},{"lib":"src/util/ui","alias":"UI"}]],"buttons":[[{"name":"button1","label":"Execute","hide":[],"disable":[]}]]}},"layers":{"Default layer":{"position":{"left":37,"top":24},"size":{"width":70,"height":32},"zIndex":0,"display":false,"title":"Deal with actions","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Deal with actions","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Deal with actions","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Deal with actions","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"rangesManager"},"actionsManager":{"position":{"left":0,"top":6},"size":{"width":52,"height":76},"zIndex":0,"display":true,"title":"Deal with actions","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"},"preferences":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Deal with actions","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"preferences"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":0,"top":43},"size":{"width":52,"height":39},"zIndex":0,"display":false,"title":"Deal with actions","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"}},"id":174,"vars_in":[{}],"actions_in":[{"rel":"execute","name":"clickedSample"},{"rel":"execute","name":"addSelectedSamples"},{"rel":"execute","name":"addSample"},{"rel":"execute","name":"addSpectrum"},{"rel":"execute","name":"refresh"},{"rel":"execute","name":"refresh"},{"rel":"execute","name":"clearSelectedSamples"},{"rel":"execute","name":"clickedPCAShape"},{"rel":"execute","name":"deletePCASelection"},{"rel":"execute","name":"addSpectraToSelection"},{"rel":"execute","name":"selectAllSpectra"},{"rel":"execute","name":"hideAllSpectra"},{"rel":"execute","name":"hideSpectra"},{"rel":"execute","name":"selectCurrentSpectraSelection"},{"rel":"execute","name":"forceRecolor"},{"rel":"execute","name":"selectCategory"},{"rel":"execute","name":"SetTarget"},{"rel":"execute","name":"compassAddSpectraToSelection"},{"rel":"execute","name":"compassSelectCurrentSpectraSelection"},{"rel":"execute","name":"compassHideSpectra"},{"rel":"execute","name":"compassDeleteSelection"}],"vars_out":[{"jpath":[]}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"Deal with actions","zindex":3},{"url":"modules/types/edition/slick_grid/","configuration":{"sections":{},"groups":{"group":[{"slickCheck":[["enableCellNavigation","rowNumbering","forceFitColumns","highlightScroll","editable"]],"copyPaste":[[]],"copyPasteOptions":[["newRows"]],"autoColumns":[["remove"]],"toolbar":[[]],"colorjpath":[["bgcolor"]],"slick.defaultColumnWidth":[null],"slick.rowHeight":[null],"slick.headerRowHeight":[30],"slick.selectionModel":["row"],"idProperty":[""],"filterType":["pref"],"filterRow":["if (this.event==='rowsChanged') {\n    const targetID=String(API.getData('preferences').convolution.targetID);\n    for (let i = 0; i < this.rows.length; i++) {\n        const row = this.rows[i];\n        row.item.bgcolor = String(row.item.id) === targetID ? '#98F274' : undefined;\n    }\n    rerender();\n}"],"customJpaths":["jcamp.dUrl,pdf.dUrl,file.dUrl,jcamp.data,experiment,instrument"]}],"cols":[[{"name":"Identifier","jpath":["id"],"editor":"none","forceType":"","formatter":"typerenderer","copyFormatter":"default","visibility":"both","rendererOptions":"","editorOptions":"","width":126,"hideColumn":[]},{"name":"Category","jpath":["category"],"editor":"string","forceType":"","formatter":"typerenderer","copyFormatter":"default","visibility":"both","rendererOptions":"","editorOptions":"","width":35,"hideColumn":[]},{"name":"👁️","jpath":["selected"],"editor":"boolean","forceType":"boolean","formatter":"typerenderer","copyFormatter":"default","visibility":"both","rendererOptions":"","editorOptions":"","width":40,"minWidth":"40","maxWidth":"40","hideColumn":[]},{"name":"Color","jpath":["color"],"editor":"color","forceType":"color","formatter":"typerenderer","copyFormatter":"default","visibility":"both","rendererOptions":"","editorOptions":"","width":40,"minWidth":"40","maxWidth":"40","hideColumn":[]},{"name":"Filter","jpath":["toStocsy"],"editor":"boolean","forceType":"","formatter":"typerenderer","copyFormatter":"default","visibility":"both","rendererOptions":"","editorOptions":"","width":30,"hideColumn":[]},{"name":"🚦","jpath":["stocsyColor"],"editor":"color","forceType":"color","formatter":"typerenderer","copyFormatter":"default","visibility":"both","rendererOptions":"","editorOptions":"","width":40,"minWidth":"40","maxWidth":"40","hideColumn":[]}]],"actionCols":[[{"name":"🎯","tooltip":"Set target for relative spectra","icon":"fa-bullseye","backgroundColor":[255,255,255,0],"color":[0,0,0,1],"action":"SetTarget","position":"end","clickMode":"text","isAction":true}]],"groupings":[[{"getter":[]}]],"actionOutButtons":[[{}]],"data":[{"saveInView":[[]],"varname":[""],"data":["[]"]}]}},"layers":{"Default layer":{"position":{"left":0,"top":32},"size":{"width":38,"height":50},"zIndex":0,"display":true,"title":"List of spectra in dataset","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"rangesManager"},"actionsManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"},"preferences":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"preferences"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"}},"id":175,"vars_in":[{"rel":"list","name":"spectraInDataset"}],"actions_in":[{}],"title":"List of spectra in dataset","vars_out":[{"event":"onHover","rel":"row","jpath":["toc"],"name":"tocHovered"},{"event":"onRowsSelect","rel":"rows","jpath":[],"name":"currentlySelectedSpectra"},{"event":"onHover","rel":"row","jpath":[],"name":"hoverSelectedSpectrum"}],"actions_out":[{"event":"onHover","rel":"row","jpath":[],"name":"hoverRow"}],"zindex":2,"toolbar":{"custom":[[{"title":"Remove all spectra from dataset","icon":"fa-eraser","action":"clearSelectedSamples","position":"begin","color":[100,100,100,1]},{"title":"Select category","icon":"fa-dot-circle","action":"selectCategory","position":"begin","color":[100,100,100,1]},{"title":"Download normalized matrix","icon":"fa-download","action":"downloadNormalizedMatrix","position":"begin","color":[100,100,100,1]},{"title":"Recolor spectra based on category","icon":"fa-palette","action":"forceRecolor","position":"begin","color":[103,78,167,1]},{"title":"Select all spectra","icon":"fa-eye","action":"selectAllSpectra","position":"begin","color":[56,118,29,1]},{"title":"Append to selected spectra","icon":"fa-plus","action":"addSpectraToSelection","position":"begin","color":[56,118,29,1]},{"title":"Select only current spectra","icon":"fa-bullseye","action":"selectCurrentSpectraSelection","position":"begin","color":[180,95,6,1]},{"title":"Remove spectra from current selection","icon":"fa-minus","action":"hideSpectra","position":"begin","color":[153,0,0,1]},{"title":"Unselect all spectra","icon":"fa-eye-slash","action":"hideAllSpectra","position":"begin","color":[153,0,0,1]}]],"common":[{"toolbar":[[]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}]},{"url":"modules/types/client_interaction/code_executor/","configuration":{"sections":{},"groups":{"group":[{"display":[["editor","buttons"]],"execOnLoad":[["yes"]],"asyncAwait":[["top"]],"script":["const twigPreferences = `\n<style>\n    #displayPreferences select {\n        background-color: #DDD;\n        font-size: small;\n    }\n</style>\n<div id=\"displayPreferences\">\n    Display:\n    <select name='display.selection'>\n        <option value=\"\">None</option>\n        <option value=\"selected\">Selected</option>\n        <option value=\"all\">All</option>\n    </select>\n    \n    {% if keepOriginal %}\n        — \n        <select name='display.original'>\n            <option value=\"true\">Original</option>\n            <option value=\"false\">Normalized</option>\n        </select>\n    {% else %}\n        <input type='hidden' name='display.original' value='false'>\n    {% endif %}\n    \n     — \n    \n    Box-plot:\n    <select name='display.boxplot'>\n        <option value=\"\">None</option>\n        <option value=\"selected\">Selected</option>\n        <option value=\"all\">All</option>\n    </select>\n        \n    <div style=\"display:none\">\n        Q2 stroke width: <input type=\"number\" step=\"any\" style=\"width:50px\" name=\"display.boxplotOptions.q2StrokeWidth\"> - color: <input type=\"color\" name=\"display.boxplotOptions.q2StrokeColor\"><br>\n        Q1/Q3 fill opacity: <input type=\"number\" step=\"any\" style=\"width:50px\" name=\"display.boxplotOptions.q13FillOpacity\"> - color: <input type=\"color\" name=\"display.boxplotOptions.q13FillColor\"><br>\n        min/max fill opacity: <input type=\"number\" step=\"any\" style=\"width:50px\" name=\"display.boxplotOptions.minMaxFillOpacity\"> - color: <input type=\"color\" name=\"display.boxplotOptions.minMaxFillColor\"><br>\n    </div>\n    \n    <label>\n        <input type=\"checkbox\" name=\"display.trackingInfo\">\n        Tracking info\n    </label>\n    \n    — Correlation:\n        <select name='display.correlation'>\n            <option value=\"\">None</option>\n            <option value=\"selected\">Selected</option>\n            <option value=\"compass\">COMPASS</option>\n            <option value=\"all\">All</option>\n        </select>\n        <input type=\"hidden\" name=\"display.correlationIndex\" step=\"any\" value=\"{{preferences.display.correlationIndex}}\" style=\"width: 50px\">\n            \n</div>\n`;\n\nAPI.createData('twigPreferences', twigPreferences);\n"]}],"libs":[[{"lib":"vh/eln/sample/ml/viewsPreferences","alias":"Prefs"}]],"buttons":[[{"name":"button1","label":"Execute","hide":[],"disable":[]}]]}},"layers":{"Default layer":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"rangesManager"},"actionsManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"},"preferences":{"position":{"left":80,"top":34},"size":{"width":52,"height":45},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"preferences"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"}},"id":176,"vars_in":[{}],"actions_in":[{}],"vars_out":[{"jpath":[]}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"","zindex":2},{"url":"modules/types/display/template-twig/","configuration":{"sections":{},"groups":{"group":[{"selectable":[[]],"template":[""],"modifyInForm":[["yes"]],"debouncing":[500],"formOptions":[["keepFormValueIfDataUndefined"]]}]}},"layers":{"Default layer":{"position":{"left":62,"top":47},"size":{"width":74,"height":5},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":false,"created":true,"name":"Default layer"},"admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"rangesManager"},"actionsManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"},"preferences":{"position":{"left":79,"top":12},"size":{"width":54,"height":16},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"preferences"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"}},"id":177,"vars_in":[{"rel":"tpl","name":"twigPreferences"},{"rel":"form","name":"preferences"},{"rel":"value","name":"ranges"},{"rel":"value","name":"keepOriginal"},{"rel":"value","name":"preferences"}],"actions_in":[{}],"vars_out":[{"jpath":[]}],"actions_out":[{"event":"onFormChanged","rel":"form","jpath":[],"name":"changedPreferences"},{"event":"onFormSubmitted","rel":"form","jpath":[],"name":"UpdateChart"}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"","zindex":2},{"url":"modules/types/display/template-twig/","configuration":{"sections":{},"groups":{"group":[{"selectable":[[]],"template":["<style>\n    #memoryInfo {\n        font-family: monospace;\n    }\n</style>\n<div id=\"memoryInfo\">\n    <b>Memory</b>: \n    Original data:\n    {{rendertype(memoryInfo.original+0.00001,{numeral:'0 b'})}}\n    - Normalized data: {{rendertype(memoryInfo.normalized,{numeral:'0 b'})}}\n    - Max allowed {{rendertype(memoryInfo.maxMemory,{numeral:'0 b'})}}\n    {% if memoryInfo.keepOriginal %}\n        &nbsp;<b style=\"color: green\">Original data present</b>\n    {% else %}\n        &nbsp;<b style=\"color: red\">Missing original data</b>\n    {% endif %}\n    \n</div>\n"],"modifyInForm":[[]],"debouncing":[0],"formOptions":[["keepFormValueIfDataUndefined"]]}]}},"layers":{"Default layer":{"position":{"left":48,"top":1},"size":{"width":79,"height":2},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":false,"created":true,"name":"Default layer"},"admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"rangesManager"},"actionsManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"},"preferences":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"preferences"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"}},"id":178,"vars_in":[{"rel":"value","name":"memoryInfo"}],"actions_in":[{}],"vars_out":[{"jpath":[]}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[[]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"","zindex":2},{"url":"modules/types/client_interaction/code_executor/","configuration":{"sections":{},"groups":{"group":[{"display":[["editor","buttons"]],"execOnLoad":[[]],"asyncAwait":[["top"]],"script":["let datasetFromHome = API.getData('datasetFromHome').triggerChange();\nconsole.log(datasetFromHome)"]}],"libs":[[{}]],"buttons":[[{"name":"button1","label":"Execute","hide":[],"disable":[]}]]}},"layers":{"Default layer":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":69},"size":{"width":70,"height":15},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"rangesManager"},"actionsManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"},"preferences":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"preferences"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"}},"id":179,"vars_in":[{}],"actions_in":[{}],"vars_out":[{"jpath":[]}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"","zindex":2},{"url":"modules/types/client_interaction/code_executor/","configuration":{"sections":{},"groups":{"group":[{"display":[["editor","buttons"]],"execOnLoad":[[]],"asyncAwait":[["top"]],"script":["let value=this.action.value;\n\nswitch (this.action.name) {\n    case 'trackClicked': {\n        if (value.event.altKey && value.event.shiftKey) {\n\n            let key=Object.keys(value.data)[0];\n            let preferences=API.getData('preferences');\n            preferences.display.correlationIndex=value.data[key].indexClosest;\n            preferences.display.correlationX=value.data[key].xExact;\n            if (! String(preferences.display.correlation)) {\n                preferences.display.correlation=\"selected\";\n                preferences.display.selection=\"none\";\n            }\n            preferences.triggerChange();\n        }\n        break;\n    }\n    case 'trackMove': {\n        let displayPreferences = API.getData('preferences').display.resurrect();\n        const trackMove = this.action.value.data.chart;\n        if (! trackMove || ! displayPreferences.trackingInfo || displayPreferences.original==='true') {\n            API.createData('trackAnnotations', []);\n            return;\n        }\n        const spectraProcessor=API.cache('spectraProcessor');\n        const annotations=spectraProcessor.getTrackAnnotation(trackMove.indexBefore)\n        API.createData('trackAnnotations', annotations)\n        break;\n    }\n    case 'downloadNormalizedMatrix':\n        const spectraProcessor = API.cache('spectraProcessor');\n        let tsv=spectraProcessor.getNormalizedText();\n        let fileSaver=await API.require('file-saver');\n        var blob = new Blob([tsv], {type: \"text/tab-separated-values;charset=utf-8\"});\n        fileSaver( blob, \"data.tsv\");\n        break;\n    default:\n}\n"]}],"libs":[[{}]],"buttons":[[{"name":"button1","label":"Execute","hide":[],"disable":[]}]]}},"layers":{"Default layer":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"Deal with other actions","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"rangesManager"},"actionsManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"},"preferences":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"preferences"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":0,"top":0},"size":{"width":63,"height":68},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Load and Process"}},"id":180,"vars_in":[{}],"actions_in":[{"rel":"execute","name":"downloadNormalizedMatrix"},{"rel":"execute","name":"trackMove"},{"rel":"execute","name":"trackClicked"}],"vars_out":[{"jpath":[]}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"","zindex":4},{"url":"modules/types/client_interaction/code_executor/","configuration":{"sections":{},"groups":{"group":[{"display":[["editor","buttons"]],"execOnLoad":[[]],"asyncAwait":[["top"]],"script":["const spectraInDatasetModifications = await API.require('vh/eln/sample/ml/spectraInDatasetModifications');\n\nspectraInDatasetModifications();\n\n"]}],"libs":[[{}]],"buttons":[[{"name":"button1","label":"Execute","hide":[],"disable":[]}]]}},"layers":{"Default layer":{"position":{"left":32,"top":33},"size":{"width":43,"height":40},"zIndex":0,"display":false,"title":"Monitor modifications of spectraInDataset","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"rangesManager"},"actionsManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"},"preferences":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"preferences"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":64,"top":0},"size":{"width":60,"height":12},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Load and Process"}},"id":181,"vars_in":[{"rel":"inputValue","name":"spectraInDataset"}],"actions_in":[{}],"vars_out":[{"jpath":[]}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"","zindex":4},{"url":"modules/types/client_interaction/code_executor/","configuration":{"sections":{},"groups":{"group":[{"display":[["editor","buttons"]],"execOnLoad":[["yes"]],"asyncAwait":[["top"]],"script":["console.log('Load and process', this.action, this.variable);\n\nawait recreateCharts(this.variable);\n\nAPI.doAction('changedSelectedSpectra');\n\n  async function recreateCharts(variable) {\n    if (!API.getData('preferences')) return;\n    const preferences = JSON.parse(JSON.stringify(API.getData('preferences')));\n\n    if (variable && !preferences.display.autorefresh) {\n      return;\n    }\n\n    const spectraProcessor = API.cache('spectraProcessor');\n    const spectraDataSet = API.cache('spectraDataSet');\n\n    if (!spectraProcessor.spectra || spectraProcessor.spectra.length === 0)\n      return;\n\n    if (variable === 'preferences') {\n      let currentPreferences = JSON.stringify(preferences);\n      if (API.cache('previousPreferences') === currentPreferences) return;\n      API.cache('previousPreferences', currentPreferences);\n    }\n\n    console.log('Update chart');\n\n    const selectedIDs = spectraProcessor.spectra\n      .filter((spectrum) => spectrum.meta.selected)\n      .map((spectrum) => spectrum.id);\n\n    let ids = [];\n    switch (preferences.display.selection) {\n      case 'all':\n        ids = spectraProcessor.spectra.map((spectrum) => spectrum.id);\n        break;\n      case 'selected':\n        ids = selectedIDs;\n        break;\n      default:\n    }\n\n    try {\n      if (preferences.display.original === 'true') {\n        let chart = spectraProcessor.getChart({ ids });\n        API.createData('chart', chart);\n      } else {\n        spectraProcessor.setNormalization(preferences.normalization);\n        if (preferences.postProcessing && preferences.postProcessing.scale) {\n          let postProcessingOptions = JSON.parse(JSON.stringify(preferences.postProcessing));\n          let ranges = API.getData('ranges');\n          if (Array.isArray(ranges)) {\n            postProcessingOptions.scale.range = ranges\n              .resurrect()\n              .filter((range) => range.label === postProcessingOptions.scale.range)[0];\n          }\n          postProcessingOptions.ids = ids;\n          console.log({ postProcessingOptions });\n          API.createData(\n            'chart',\n            spectraProcessor.getPostProcessedChart(postProcessingOptions),\n          );\n        } else {\n          API.createData('chart', spectraProcessor.getNormalizedChart({ ids }));\n        }\n      }\n    } catch (e) {\n      API.createData('chart', {});\n      UI.showNotification(e.toString(), 'warning');\n    }\n\n    let chartPrefs = spectraDataSet.getChartPrefs();\n    let currentChartPrefs = API.cache('currentChartPrefs');\n    if (chartPrefs !== currentChartPrefs) {\n      API.cache('currentChartPrefs', chartPrefs);\n      API.doAction('setChartPreferences', chartPrefs);\n    }\n\n    API.createData(\n      'filterAnnotations',\n      spectraProcessor.getNormalizationAnnotations(),\n    );\n\n    if (!preferences.display.boxplot) {\n      API.createData('boxPlotChart', []);\n    } else {\n      try {\n        const boxPlotChart = spectraProcessor.getBoxPlotChart({\n          ids:\n            preferences.display.boxplot === 'selected'\n              ? selectedIDs\n              : undefined,\n          boxplot: preferences.display.boxplotOptions,\n        });\n        API.createData('boxPlotChart', boxPlotChart);\n      } catch (e) {\n        UI.showNotification(e.toString(), 'warning');\n      }\n    }\n\n    if (!preferences.display.correlation) {\n      API.createData('correlationChart', {});\n      API.createData('correlationAnnotations', []);\n    } else {\n      preferences.display.correlationIndex = Number.parseInt(\n        preferences.display.correlationIndex,\n      );\n      if (!Number.isInteger(preferences.display.correlationIndex)) {\n        preferences.display.correlationIndex = Math.floor(\n          preferences.normalization.numberOfPoints / 2,\n        );\n      }\n      let selected = undefined;\n      if (preferences.display.correlation === 'selected') {\n          selected = true;\n      } else if (preferences.display.correlation === 'compass') {\n          selected = true;\n      } else if (preferences.display.correlation === 'scatter') {\n          selected = true;\n      } else {\n          selected = false;\n      }\n      \n      if (selectedIDs.length === 0) {\n          selected = false;\n      } \n      \n    // console.log({ j: preferences.display.correlation, selected, selectedIDs })\n      \n      let correlationChart = spectraProcessor.getAutocorrelationChart(\n        preferences.display.correlationIndex,\n        {\n          ids: selected ? selectedIDs : undefined,\n        },\n      );\n      \n      API.createData('correlationChart', correlationChart);\n\n      const annotations = [];\n      annotations.push({\n        type: 'line',\n        position: [\n          {\n            x: preferences.display.correlationX,\n            y: '2000px',\n          },\n          {\n            x: preferences.display.correlationX,\n            y: '0px',\n          },\n        ],\n        strokeWidth: '2px',\n        strokeColor: 'yellow',\n      });\n      API.createData('correlationAnnotations', annotations);\n    }\n  }\n  return recreateCharts;"]}],"libs":[[{}]],"buttons":[[{"name":"button1","label":"Update data and charts","hide":[],"disable":[]}]]}},"layers":{"Default layer":{"position":{"left":111,"top":27},"size":{"width":24,"height":5},"zIndex":0,"display":false,"title":"Recreate the data and charts based on the preferences","bgColor":[255,255,255,0],"wrapper":false,"created":true,"name":"Default layer"},"admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"rangesManager"},"actionsManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"},"preferences":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"preferences"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":1,"top":69},"size":{"width":65,"height":60},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Load and Process"}},"id":182,"vars_in":[{"rel":"inputValue","name":"preferences"}],"actions_in":[{"rel":"execute","name":"UpdateChart"}],"vars_out":[{"jpath":[]}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"","zindex":4},{"url":"modules/types/client_interaction/code_executor/","configuration":{"sections":{},"groups":{"group":[{"display":[["editor","buttons"]],"execOnLoad":[[]],"asyncAwait":[["top"]],"script":["console.log(this.action);\nconst roc=API.cache('roc');\n\nconst spectraDataSet=API.cache('spectraDataSet');\n\nswitch (this.action.name) {\n    case 'oplsaddSpectraToSelection': {\n        let scatterSelected=API.getData('scatterSelected').map( entry => String(entry.id));\n        let spectraInDataset=API.getData('spectraInDataset').filter( entry => scatterSelected.includes(String(entry.id)));\n        API.createData('currentlySelectedSpectra', spectraInDataset);\n        window.setTimeout( () => {\n            API.doAction('addSpectraToSelection');\n        });\n        break;\n    }\n    case 'oplsselectCurrentSpectraSelection': {\n        let scatterSelected=API.getData('scatterSelected').map( entry => String(entry.id));\n        let spectraInDataset=API.getData('spectraInDataset').filter( entry => scatterSelected.includes(String(entry.id)));\n        API.createData('currentlySelectedSpectra', spectraInDataset);\n        window.setTimeout( () => {\n            API.doAction('selectCurrentSpectraSelection');\n        });\n        break;\n    }\n    case 'oplsHideSpectra': {\n        let scatterSelected=API.getData('scatterSelected').map( entry => String(entry.id));\n        let spectraInDataset=API.getData('spectraInDataset').filter( entry => scatterSelected.includes(String(entry.id)));\n        API.createData('currentlySelectedSpectra', spectraInDataset);\n        window.setTimeout( () => {\n            API.doAction('hideSpectra');\n        });\n        break;\n    }\n    case 'clickedOPLSShape':\n        if (this.action.value.event.altKey) {\n            let spectraInDataset = API.getData('spectraInDataset');\n            let entry=spectraInDataset.filter(entry => String(entry.id) === String(this.action.value.data.info.id))[0];\n            entry.selected = DataObject.resurrect(entry.selected) ? false : true;\n            spectraInDataset.triggerChange();\n        }\n        break;\n    case 'deleteOPLSSelection': {\n\n            let spectraInDataset = API.getData('spectraInDataset');\n            let scatterSelected=API.getData('scatterSelected');\n\n            for (let selected of scatterSelected) {\n                for (let i=0; i<spectraInDataset.length; i++) {\n                    let spectrum=spectraInDataset[i];\n                    if (String(selected.id)===String(spectrum.id)) {\n                        spectraInDataset.splice(i,1);\n                        break;\n                    }\n                }\n            }\n            spectraInDataset.triggerChange();\n        }\n        break;\n    default:\n        await spectraDataSet.processAction(this.action);\n}\n\n"]}],"libs":[[{"lib":"vh/eln/Sample","alias":"Sample"},{"lib":"src/util/color","alias":"Color"},{"lib":"src/util/ui","alias":"UI"}]],"buttons":[[{"name":"button1","label":"Execute","hide":[],"disable":[]}]]}},"layers":{"Default layer":{"position":{"left":37,"top":24},"size":{"width":70,"height":32},"zIndex":0,"display":false,"title":"Deal with actions","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Default layer"},"admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"admin"},"importData":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"importData"},"rangesManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"rangesManager"},"actionsManager":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"actionsManager"},"preferences":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"preferences"},"Admin":{"position":{"left":0,"top":0},"size":{"width":20,"height":20},"zIndex":0,"display":false,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Admin"},"Load and Process":{"position":{"left":64,"top":34},"size":{"width":60,"height":34},"zIndex":0,"display":true,"title":"","bgColor":[255,255,255,0],"wrapper":true,"created":true,"name":"Load and Process"}},"id":183,"vars_in":[{}],"actions_in":[{"rel":"execute","name":"clickedSample"},{"rel":"execute","name":"addSelectedSamples"},{"rel":"execute","name":"addSample"},{"rel":"execute","name":"addSpectrum"},{"rel":"execute","name":"refresh"},{"rel":"execute","name":"refresh"},{"rel":"execute","name":"clearSelectedSamples"},{"rel":"execute","name":"clickedOPLSShape"},{"rel":"execute","name":"deleteOPLSSelection"},{"rel":"execute","name":"addSpectraToSelection"},{"rel":"execute","name":"selectAllSpectra"},{"rel":"execute","name":"hideAllSpectra"},{"rel":"execute","name":"hideSpectra"},{"rel":"execute","name":"selectCurrentSpectraSelection"},{"rel":"execute","name":"forceRecolor"},{"rel":"execute","name":"oplsaddSpectraToSelection"},{"rel":"execute","name":"oplsselectCurrentSpectraSelection"},{"rel":"execute","name":"oplsHideSpectra"},{"rel":"execute","name":"selectCategory"},{"rel":"execute","name":"resetMinMax"}],"vars_out":[{"jpath":[]}],"actions_out":[{"jpath":[]}],"toolbar":{"custom":[[{"title":"","icon":"","action":"","position":"begin","color":[100,100,100,1]}]],"common":[{"toolbar":[["Open Preferences"]]}]},"css":[{"fontSize":[""],"fontFamily":[""]}],"title":"","zindex":4}],"variables":[{"jpath":[""]}],"aliases":[{"path":"https://www.lactame.com/github/cheminfo-js/visualizer-helper/e3a72c3d4b1f675ceeab35c106ffed7a78928e18/","alias":"vh"},{"path":"http://localhost:9898/cheminfo-js/visualizer-helper/","alias":"vhxx"},{"path":"https://www.lactame.com/lib/spectra-processor/2.9.0/spectra-processor","alias":"SpectraProcessor"},{"path":"https://www.lactame.com/lib/ml/5.1.1/ml","alias":"ML"}],"configuration":{"title":"COMPASS & STOCSY"},"actionscripts":[{"sections":{},"groups":{"action":[{"name":[null],"script":[null]}]}}],"init_script":[{"sections":{},"groups":{"general":[{"script":["if((typeof IframeBridge)==='undefined') {\n    let Grid=await require('src/main/grid');\n    Grid.setInitialLayerName('Default layer');\n}\n\nconst [\n    Roc,\n    loadTwig,\n    UserAnalysisResults,\n    Toc,\n    SpectraDataSet,\n    libs,\n    RangesManager,\n] = await API.require([\n    'vh/rest-on-couch/Roc',\n    'vh/eln/templates/loadTwig',\n    'vh/rest-on-couch/UserAnalysisResults',\n    'vh/eln/Toc',\n    'vh/eln/sample/ml/SpectraDataSet',\n    'vh/eln/libs',\n    'vh/eln/sample/RangesManager',\n]);\n\nconst SpectraProcessor = (await API.require('SpectraProcessor')).SpectraProcessor;\nAPI.cache('spectraProcessor', new SpectraProcessor({}));\n\nif((typeof IframeBridge)!=='undefined') {\n    IframeBridge.onMessage(onMessage);\n    IframeBridge.ready();\n} else {\n    const spectraDataSet = new SpectraDataSet(undefined, undefined, {\n        defaultAttributes: {\n            pcaModel: false\n        }\n    });\n    spectraDataSet.initializeAnalysis();\n    API.cache('spectraDataSet', spectraDataSet);\n}\n\nasync function onMessage(data) {\n    if(data.type === 'tab.data') {\n        var couchDB = data.message.couchDB;\n        var uuid = data.message.uuid;\n        API.cache('couchDB', couchDB);\n        API.cache('uuid', uuid);\n        var roc = new Roc(couchDB);\n        API.cache('roc', roc);\n         \n        var userAnalysisResults = new UserAnalysisResults(roc, data.message.uuid);\n        API.cache(\"userAnalysisResults\", userAnalysisResults);\n        userAnalysisResults.refresh();\n        API.createData('description', '');\n        \n        const sampleToc = new Toc(roc);\n        sampleToc.initializeGroupForm();\n        API.cache('sampleToc', sampleToc);\n        \n        const spectraDataSet = new SpectraDataSet(roc, sampleToc, {\n            defaultAttributes: {\n                pcaModel: false\n            }\n        });\n        spectraDataSet.initializeAnalysis({autoRefresh:false});\n        API.cache('spectraDataSet', spectraDataSet);\n    }\n}\n\nAPI.createData('spectraInDataset',[]);\n\nconst ranges = await API.createData('ranges', []);\nconst rangesManager = new RangesManager(ranges, {ensureLabel: true});\nAPI.cache('rangesManager', rangesManager);\n\nAPI.createData('preferences', {\n    first: 0.98,\n    second: 0.80,\n    mode: 1,\n    data: {keep: true},\n    clickedPoint: 0,\n    display: {\n        selection: 'selected',\n        original: false,\n        trackingInfo: false,\n        correlation: '',\n        correlationIndex: false,\n        boxplot: false,\n        boxplotOptions: {\n            q13FillColor : '#000',\n            q13FillOpacity : 0.3,\n            q2StrokeColor : '#000',\n            q2StrokeWidth : 3,\n            minMaxFillColor : '#000',\n            minMaxFillOpacity : 0.15\n        },\n        autorefresh: true\n    },\n    normalization: {\n        from: 0,\n        to: 10,\n        numberOfPoints:1024\n    },\n    convolution: {\n        targetID: undefined\n    },\n});\n\nAPI.createData('currentData', []);\nAPI.createData('selectedSpectra', []);\nAPI.cache('currentRange', []);\nAPI.createData('displayMode', {\n    mode: 'compass'\n})\n\nAPI.createData('datasetFromHome', window.location.search.substr(1))\n\n// loadTwig(['org.cheminfo.sampleToc.chemical.default']);\n\n// API.require('vh/util/tips').then( Tips => {\n//     Tips.showTips();\n//     Tips.addPageHelp({iconSize:'fa-3x'});\n// });\n"]}]}}],"custom_filters":[{"sections":{"modules":[{"sections":{},"groups":{"modules":[[{}]]}}],"filtersLib":[{"sections":{},"groups":{"filters":[[{}]]}}],"filters":[{"sections":{},"groups":{"filter":[{"name":[null],"script":[null]}],"libs":[[{}]]}}]},"groups":{}}],"actionfiles":[{"sections":{},"groups":{"action":[[{}]]}}]}